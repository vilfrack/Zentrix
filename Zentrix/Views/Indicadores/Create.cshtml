
@model Zentrix.Models.BD.Indicador

@{
    SelectList DropPerpestiva = ViewBag.Perpestiva;
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";

    SelectList marca = ViewBag.Marca;
    //SelectList DropUsuario = ViewBag.DropUsuario;
}
<link rel="stylesheet" href="~/Content/bootstrap-datepicker.css" />

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Indicador</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="col-sm-3">
                <label>Marca</label>
                @Html.DropDownList("Proveedor1", marca, "Seleccionar", new { @class = "form-control select2-allow-clear" })
            </div>

            <div class="col-sm-3">
                <label>Producto</label>
                @Html.DropDownList("DropProducto", new SelectList(string.Empty, "CodProd", "Descrip"), "Seleccionar un producto", new { @class = "form-control" })
            </div>
        </div>


            <br />
            <div class="form-group">
                <label class="control-label col-md-2">Nombre del indicador</label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.nombre, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.nombre, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Objetivo estrategico</label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.objetivoEstrategico, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.objetivoEstrategico, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.target, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.target, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.target, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.rojo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.rojo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.rojo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.amarillo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.amarillo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.amarillo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.verde, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.verde, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.verde, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Fecha inicio</label>
                <div class="input-group date col-md-10" id="DivDatapiker">
                    @*<input type="text" name="fecha" class="form-control">*@
                    @Html.EditorFor(model => model.fecha, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

        <div class="form-group">
            <label class="control-label col-md-2">Fecha Fin</label>
            <div class="input-group date col-md-10" id="DivDatapiker">
                @*<input type="text" name="fecha" class="form-control">*@
                @Html.EditorFor(model => model.FechaFin, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

            <div class="form-group">
                <label class="control-label col-md-2"> Seleccionar perspectiva</label>
                <div class="col-md-10">
                    @Html.DropDownList("IDPerspectiva", DropPerpestiva, "Seleccionar", new { @class = "form-control select2-allow-clear" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
}


<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script src="~/Scripts/jquery-3.2.1.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js"></script>

<script>
    $('#DivDatapiker input').datepicker({
        todayBtn: "linked",
        autoclose: true,
        todayHighlight: true,
        format: "mm/yyyy",
        minViewMode: 1
    });

    $("#Proveedor1").change(function () {
        $("#DropProducto").empty();
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetProdutos")', // we are calling json method
            dataType: 'json',
            data: { id: $("#Proveedor1 option:selected").text() },
            success: function (states) {
                // states contains the JSON formatted list
                // of states passed from the controller
                $.each(states, function (i, state) {
                    $("#DropProducto").append('<option value="' + state.Value + '">' + state.Text + '</option>');
                }); // here we are adding option for States
            },
            error: function (ex) {
                alert('Failed to retrieve states.' + ex);
            }
        });
        return false;
    })
</script>



